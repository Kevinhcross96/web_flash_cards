# User.delete_all
# Game.delete_all
# Card.delete_all
# Deck.delete_all
# Guess.delete_all

Deck.create(name: "Ruby Enumerables", public: true)
Deck.create(name: "Acronyms", public: true)
Deck.create(name: "Javascript", public: true)
Deck.create(name: "Databases", public: true)

Card.create(question: "Passes each element of the collection to the given block. The method returns true if the block ever returns a value other than false or nil. If the block is not given, Ruby adds an implicit block of { |obj| obj } that will cause _____ to return true if at least one of the collection members is not false or nil.  --- POSSIBILITIES --  .select --  .find --  .all? --  .sort --  . any? --  .include? --  .reduce  --  .sort_by", answer: '.any?', deck_id: 1)
Card.create(question: "Passes each element of the collection to the given block. The method returns true if the block never returns false or nil. If the block is not given, Ruby adds an implicit block of { |obj| obj } which will cause ______ to return true when none of the collection members are false or nil.  --- POSSIBILITIES --  .select --  .find --  .all? --  .sort --  . any? --  .include? --  .reduce  --  .sort_by", answer: '.all?', deck_id: 1)
Card.create(question: "Passes each entry in enum to block. Returns the first for which block is not false. If no object matches, calls ifnone and returns its result when it is specified, or returns nil otherwise.  --- POSSIBILITIES --  .select --  .find --  .all? --  .sort --  . any? --  .include? --  .reduce  --  .sort_by" , answer: ".find", deck_id: 1)
Card.create(question: "Combines all elements of enum by applying a binary operation, specified by a block or a symbol that names a method or operator.  --- POSSIBILITIES --  .select --  .find --  .all? --  .sort --  . any? --  .include? --  .reduce  --  .sort_by", answer: ".reduce", deck_id: 1)
Card.create(question: "Returns true if any member of enum equals obj. Equality is tested using ==.  --- POSSIBILITIES --  .select --  .find --  .all? --  .sort --  . any? --  .include? --  .reduce  --  .sort_by", answer: ".include?", deck_id: 1)
Card.create(question: "Returns an array containing the items in enum _____ed.  --- POSSIBILITIES --  .select --  .find --  .all? --  .sort --  . any? --  .include? --  .reduce  --  .sort_by", answer: ".sort", deck_id: 1)
Card.create(question: "Returns an array containing all elements of enum for which the given block returns a true value.  --- POSSIBILITIES --  .select --  .find --  .all? --  .sort --  . any? --  .include? --  .reduce  --  .sort_by", answer: ".select", deck_id: 1)
Card.create(question: "Sorts enum using a set of keys generated by mapping the values in enum through the given block.  --- POSSIBILITIES --  .select --  .find --  .all? --  .sort --  . any? --  .include? --  .reduce  --  .sort_by", answer: ".sort_by", deck_id: 1)

Card.create(question: "BTW", answer: "by the way", deck_id: 2)
Card.create(question: "FAQ", answer: "frequently asked questions", deck_id: 2)
Card.create(question: "IOW", answer: "in other words", deck_id: 2)
Card.create(question: "IMHO", answer: "in my humble opinion", deck_id: 2)
Card.create(question: "LOL", answer: "laugh out loud", deck_id: 2)
Card.create(question: "FKA", answer: "formally known as", deck_id: 2)
Card.create(question: "IIRC", answer: "if i recall correctly", deck_id: 2)
Card.create(question: "DIY", answer: "do it yourself", deck_id: 2)
Card.create(question: "FTW", answer: "for the win", deck_id: 2)

Card.create(question: "Is Javascript case sensitive?", answer: "yes", deck_id: 3)
Card.create(question: "How are single line comments started?", answer: "//", deck_id: 3)
Card.create(question: "What do you get when you add a string and a number?", answer: "a string", deck_id: 3)
Card.create(question: "What are the two different kinds of loops in jacascript?", answer: "for and while", deck_id: 3)

Card.create(question: "A field (or group of fields) that uniquely identifies a given entity in a table", answer: "primary key", deck_id: 4)
Card.create(question: "List the 4 things you can do with a database: CRUD (use commas)", answer: "create, read, update, delete", deck_id: 4)
Card.create(question: "What does SQL stand for?", answer: "structured query language", deck_id: 4)
Card.create(question: "___(AND/OR) has precedence over ___(AND/OR)", answer: "AND, OR", deck_id: 4)
Card.create(question: "Commands in SQL are ended with a ___", answer: ";", deck_id: 4)
